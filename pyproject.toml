[project]
name = "bpkit"
version = "0.0.7"
description = "Blueprint development kit for Python"
authors = [{ name = "Hamed Ghasemzadeh", email = "hg@evgnomon.org" }]
readme = "README.md"
keywords = ['python']
requires-python = ">=3.9,<4.0"
classifiers = [
    "Intended Audience :: Developers",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "pyyaml>=6.0.3",
    "pydantic>=2.0.0",
]

[project.urls]
Homepage = "https://evgnomon.github.io/bpkit/"
Repository = "https://github.com/evgnomon/bpkit"
Documentation = "https://evgnomon.github.io/bpkit/"

[dependency-groups]
dev = [
    "pytest>=7.2.0",
    "pre-commit>=2.20.0",
    "tox-uv>=1.11.3",
    "deptry>=0.23.0",
    "mypy>=0.991",
    "pytest-cov>=4.0.0",
    "ruff>=0.11.5",
    "mkdocs>=1.4.2",
    "mkdocs-material>=8.5.10",
    "mkdocstrings[python]>=0.26.1",
    "types-pyyaml>=6.0.12.20250915",
    "poethepoet>=0.24.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/bpkit"]

[tool.mypy]
files = ["src"]
disallow_any_unimported = true
no_implicit_optional = true
check_untyped_defs = true
warn_return_any = true
warn_unused_ignores = true
show_error_codes = true

[tool.pytest.ini_options]
testpaths = ["tests"]

[tool.ruff]
target-version = "py39"
line-length = 120
fix = true

[tool.ruff.lint]
select = [
    # flake8-2020
    "YTT",
    # flake8-bandit
    "S",
    # flake8-bugbear
    "B",
    # flake8-builtins
    "A",
    # flake8-comprehensions
    "C4",
    # flake8-debugger
    "T10",
    # flake8-simplify
    "SIM",
    # isort
    "I",
    # mccabe
    "C90",
    # pycodestyle
    "E", "W",
    # pyflakes
    "F",
    # pygrep-hooks
    "PGH",
    # pyupgrade
    "UP",
    # ruff
    "RUF",
    # tryceratops
    "TRY",
]
ignore = [
    # LineTooLong
    "E501",
    # DoNotAssignLambda
    "E731",
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]

[tool.ruff.format]
preview = true

[tool.coverage.report]
skip_empty = true

[tool.coverage.run]
branch = true
source = ["src"]

[tool.poe.tasks]
# Install the virtual environment and install the pre-commit hooks
install.sequence = [
    { shell = "echo 'ðŸš€ Creating virtual environment using uv'" },
    { cmd = "uv sync" },
    { cmd = "uv run pre-commit install" },
]
install.help = "Install the virtual environment and install the pre-commit hooks"

# Run code quality tools
check.sequence = [
    { shell = "echo 'ðŸš€ Checking lock file consistency with pyproject.toml'" },
    { cmd = "uv lock --locked" },
    { shell = "echo 'ðŸš€ Linting code: Running pre-commit'" },
    { cmd = "uv run pre-commit run -a" },
    { shell = "echo 'ðŸš€ Static type checking: Running mypy'" },
    { cmd = "uv run mypy" },
    { shell = "echo 'ðŸš€ Checking for obsolete dependencies: Running deptry'" },
    { cmd = "uv run deptry src" },
]
check.help = "Run code quality tools"

# Test the code with pytest
test.cmd = "uv run python -m pytest --cov --cov-config=pyproject.toml --cov-report=xml"
test.help = "Test the code with pytest"

# Clean build artifacts
clean-build.sequence = [
    { shell = "echo 'ðŸš€ Removing build artifacts'" },
    { script = "shutil:rmtree('dist', ignore_errors=True)" },
]
clean-build.help = "Clean build artifacts"

# Build wheel file
build.sequence = [
    { ref = "clean-build" },
    { shell = "echo 'ðŸš€ Creating wheel file'" },
    { cmd = "uvx --from build pyproject-build --installer uv" },
]
build.help = "Build wheel file"

# Publish a release to PyPI
publish.sequence = [
    { shell = "echo 'ðŸš€ Publishing.'" },
    { cmd = "uvx twine upload --repository-url https://upload.pypi.org/legacy/ dist/*" },
]
publish.help = "Publish a release to PyPI"

# Build and publish
build-and-publish.sequence = [
    { ref = "build" },
    { ref = "publish" },
]
build-and-publish.help = "Build and publish"

# Test if documentation can be built without warnings or errors
docs-test.cmd = "uv run mkdocs build -s"
docs-test.help = "Test if documentation can be built without warnings or errors"

# Build and serve the documentation
docs.cmd = "uv run mkdocs serve"
docs.help = "Build and serve the documentation"
